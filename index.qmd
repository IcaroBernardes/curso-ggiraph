---
format:
  revealjs:
    transition: fade
    css: www/styles.css
    theme: dark
execute: 
  echo: false
  warning: false
  error: false
---

## {}

<div id='cover-title'>Introdução ao<br>`{ggiraph}`</div>
<div id='cover-subtitle'>
<div id='cover-author'>[Ícaro Bernardes](https://github.com/IcaroBernardes) | BIT::Analytics</div>
VII SER International Seminar on Statistics with R<br>Maio de 2023
</div>

<div id='bg-masked' class='masked'></div>
<div id='cover-masked' class='masked'></div>

```{r}
# Carrega bibliotecas
library(dplyr)
library(ggplot2)
library(ggiraph)
library(carnaval)
library(glue)
library(htmltools)
library(purrr)

# Carrega notas do grupo especial do carnaval carioca de 10/11 e calcula totais
bancodedados <- carnaval::get_scores(years = 2010:2011)
bancodedados <- bancodedados |> 
  dplyr::group_by(year, school) |> 
  dplyr::summarise(score = sum(score, na.rm = TRUE)) |> 
  dplyr::ungroup()

# Associa nomes de imagens a um subconjunto de escolas
files <- dplyr::tibble(
  school = c(
    "Acadêmicos do Grande Rio",
    "Acadêmicos do Salgueiro",
    "Beija-Flor de Nilópolis",
    "Estação Primeira de Mangueira",
    "Imperatriz Leopoldinense",
    "Mocidade Independente de Padre Miguel",
    "Portela",
    "União da Ilha do Governador",
    "Unidos da Tijuca",
    "Unidos de Vila Isabel",
    "Unidos do Viradouro",
    "São Clemente"
  ),
  filename = c(
    "Grande_Rio",
    "Salgueiro",
    "Beija_Flor",
    "Mangueira",
    "Imperatriz_Leopoldinense",
    "Padre_Miguel",
    "Portela",
    "Uniao_Ilha",
    "Tijuca",
    "Vila_Isabel",
    "Viradouro",
    "Sao_Clemente"
  )
)
bancodedados <- bancodedados |> dplyr::inner_join(files)

# Gera o polygon que serve com mask para a imagem da capa
htmltools::tags$svg(
  class = "clip-svg",
  htmltools::tags$defs(
    htmltools::tags$clipPath(
      id = "cover-mask", clipPathUnits="objectBoundingBox",
      htmltools::tags$polygon(
        points = "0 0, 0.9 0.1, 0.8 1"
      )
    )
  )
)

# Conecta a uma versão slim do JQuery por meio de CDN 
htmltools::tags$script(src="https://code.jquery.com/jquery-3.6.4.min.js",
                       integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=",
                       crossorigin="anonymous")

# Conecta com a biblioteca anime.js localmente
htmltools::tags$script(src = "www/js/anime.min.js")

# Conecta ao arquivo que configura animações na página
htmltools::tags$script(src = "www/js/animation.js")

```

<!-- ########################## Slide ########################## -->
## {}

<div class='flex-row gap10' id='author'>

<div class='flex-column' id='author-profile'>

![](www/images/profile.jpg)

<div>
<strong>Ícaro Bernardes</strong>
<a class='author-link' href='https://twitter.com/icarobsc' target='_blank'><span id='twt' class='glyph'></span>@IcaroBSC</a>
<a class='author-link' href='https://github.com/IcaroBernardes' target='_blank'><span id='ghb' class='glyph'></span>@IcaroBernardes</a>
<a class='author-link' href='https://www.linkedin.com/in/icarobsc/' target='_blank'><span id='lkd' class='glyph'></span>@icarobsc</a>
<a class='author-link' href='mailto:icaro@bitanalytics.dev.br' target='_blank'><span id='eml' class='glyph'></span>icaro@bitanalytics.dev.br</a>
</div>

</div>

<div>
* Bacharel em Eng. Química (UFBA)
* Membro de grupo de pesquisa em estatística aplicada durante a graduação [(GAMMA/UFBA)](https://gamma.ufba.br)
* Co-fundador da startup de análise de dados, [BIT::Analytics](https://linktr.ee/bitanalytics)
</div>

</div>

<!-- ########################## Slide ########################## -->
## {}

<div id='challenges-text'>Membro ativo em comunidades de dataviz</div>

```{r}

htmltools::div(
  class='flex-row', id='challenges',
  
  htmltools::div(
    class='flex-column',
    
    htmltools::a("DuBoisChallenge", href = "https://github.com/IcaroBernardes/webdubois", target = "_blank"),
    glue::glue("www/images/challenges/webdubois{1:4}.png") |> 
      purrr::map(~htmltools::img(src = .))
    
  ),
  
  htmltools::div(
    class='flex-column',
    
    htmltools::a("TidyTuesday", href = "https://github.com/IcaroBernardes/tidytuesday", target = "_blank"),
    glue::glue("www/images/challenges/tidytuesday{1:4}.png") |> 
      purrr::map(~htmltools::img(src = .))
    
  ),
  
  htmltools::div(
    class='flex-column',
    
    htmltools::a("30DayChartChallenge", href = "https://github.com/IcaroBernardes/30DayChartChallenge", target = "_blank"),
    glue::glue("www/images/challenges/30DayChartChallenge{1:4}.png") |> 
      purrr::map(~htmltools::img(src = .))
    
  ),
  
  htmltools::div(
    class='flex-column',
    
    htmltools::a("30DayMapChallenge", href = "https://github.com/IcaroBernardes/30DayMapChallenge", target = "_blank"),
    glue::glue("www/images/challenges/30DayMapChallenge{1:4}.png") |> 
      purrr::map(~htmltools::img(src = .))
    
  ),
  
  htmltools::div(
    class='flex-column',
    
    htmltools::a("GamesNightViz", href = "https://github.com/IcaroBernardes/gamesviz", target = "_blank"),
    glue::glue("www/images/challenges/gamesviz{1:3}.png") |> 
      purrr::map(~htmltools::img(src = .))
    
  )
  
)

```

<!-- ########################## Slide ########################## -->
## ggplot
[Compondo gráficos com camadas]{.subtitle}

<div class='flex-row pkg-intro'>
O `{ggplot2}` tem como base o conceito de "Gramática de gráficos". Isto é, os gráficos são compostos através da combinação entre elementos individuais.

![](https://ggplot2.tidyverse.org/logo.png)
</div>

<!-- ########################## Slide ########################## -->
## ggplot
[Compondo gráficos com camadas]{.subtitle}

Frequentemente encontramos em gráficos ao menos três tipos de elementos que nos permitem produzir uma representação visual das variáveis presentes em um banco de dados:

<div class='flex-row listing-items martop5'>
<div class='list-item'><div>Formas geométricas</div><hr>**geom**</div>
<div class='list-item'><div>Regras do mapeamento</div><hr>**scale**</div>
<div class='list-item'><div>Estética e decoração</div><hr>**theme**</div>
</div>

<!-- ########################## Slide ########################## -->
## ggplot
[Compondo gráficos com camadas]{.subtitle}

<div class='flex-row gap10'>
<div class='flex-column gap10'>
```{.r code-line-numbers="1-4"}
ggplot(bancodedados) +
  geom_point(
    aes(x = year, y = score, color = score), size = 10
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )
```
<div class='list-item'><div>Formas geométricas</div><hr>**geom**</div>
</div>

```{r, fig.height=10}
ggplot(bancodedados) +
  geom_point(
    aes(x = year, y = score, color = score), size = 10
  ) 
```
</div>

<!-- ########################## Slide ########################## -->
## ggplot
[Compondo gráficos com camadas]{.subtitle}

<div class='flex-row gap10'>
<div class='flex-column gap10'>
```{.r code-line-numbers="5-8"}
ggplot(bancodedados) +
  geom_point(
    aes(x = year, y = score, color = score), size = 10
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )
```
<div class='list-item'><div>Regras do mapeamento</div><hr>**scale**</div>
</div>

```{r, fig.height=10}
ggplot(bancodedados) +
  geom_point(
    aes(x = year, y = score, color = score), size = 10
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete()
```
</div>

<!-- ########################## Slide ########################## -->
## ggplot
[Compondo gráficos com camadas]{.subtitle}

<div class='flex-row gap10'>
<div class='flex-column gap10'>
```{.r code-line-numbers="9-14"}
ggplot(bancodedados) +
  geom_point(
    aes(x = year, y = score, color = score), size = 10
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )
```
<div class='list-item'><div>Estética e decoração</div><hr>**theme**</div>
</div>

```{r, fig.height=10}
ggplot(bancodedados) +
  geom_point(
    aes(x = year, y = score, color = score), size = 10
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )
```
</div>

<!-- ########################## Slide ########################## -->
## A função aes()
[Mapeando variáveis]{.subtitle}

A função `aes()` é o elo de ligação entre as variáveis do banco de dados e as formas geométricas em um gráfico.

<div class='flex-row martop5' id='explain-aes'>
```{r}
set.seed(13)
bancodedados |> 
  dplyr::select(year, score, school) |> 
  dplyr::slice(sample.int(n(), n()))
```

```{.r}
aes(
  x = year,
  y = score,
  color = score
)
```

```{r, fig.height=9}
ggplot(bancodedados) +
  geom_point(
    aes(x = year, y = score, color = score), size = 10
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )
```
</div>

<!-- ########################## Slide ########################## -->
## {}
<div class='flex-row' id='why-ggiraph'>

<div id='why-gif'></div>
> É incrível como o `{ggplot}` nos permite expressar variáveis em uma linguagem visual.\n
Mas por que usar `{ggiraph}` para gerar gráficos interativos?

</div>

<!-- ########################## Slide ########################## -->
## Por que ggiraph?
[Interatividade num vapt-vupt]{.subtitle}

<div class='flex-row pkg-intro'>
O `{ggiraph}` é uma extensão do `{ggplot2}` e do `{htmlwidgets}` que traduz elementos ggplot em suas contrapartes na biblioteca `d3.js`.

![](https://github.com/davidgohel/ggiraph/raw/master/man/figures/logo.png)
</div>

<div id='why-girafe'>A proposta dos autores David Gohel e Panagiotis Skintzos é facilitar a criação de gráficos interativos/dinâmicos em documentos HTML feitos em Quarto/R Markdown e apps feitos em Shiny.</div>

<!-- ########################## Slide ########################## -->
## Por que ggiraph?
[Interatividade num vapt-vupt]{.subtitle}

O `{ggiraph}` segue a mesma filosofia do `{ggplot}`, mas com elementos interativos.

<div class='flex-row martop5' id='why-elements'>
<div class='list-item'><div>geom_point()</div><hr>**ggplot**</div>
<div class='list-item'><div>geom_point_interactive()</div><hr>**ggiraph**</div>
</div>

<!-- ########################## Slide ########################## -->
## Por que ggiraph?
[Interatividade num vapt-vupt]{.subtitle}

<div class='flex-row' id='why-example'>
```{.r code-line-numbers="3-4|7-12|24-25"}
# Versão estática c/ elementos interativos e sintaxe ggplot
estatico <- ggplot(bancodedados) +
  ## Elemento interativo (geom)
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  ## Mapeamentos interativos
  aes(
    tooltip = school,
    data_id = school,
    onclick = 'this.style.r = "20";'
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

# Versão interativa
ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```

```{r, fig.height=12}
# Versão estática c/ elementos interativos e sintaxe ggplot
estatico <- ggplot(bancodedados) +
  ## Elemento interativo (geom)
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  ## Mapeamentos interativos
  aes(
    tooltip = school,
    data_id = school,
    onclick = 'this.style.r = "20";'
  ) +
  scale_color_gradientn(
    colours = rio.paletter("Mangueira")
  ) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

# Versão interativa
ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```
</div>

<!-- ########################## Slide ########################## -->
## Por que ggiraph?
[Interatividade num vapt-vupt]{.subtitle}

Etapas de criação de um gráfico interativo ggiraph:

<div class='martop5' id='why-steps'>
<div class='text-steps'>Uso de elementos interativos<br><span>geom, scale, etc</span></div>
```{.r}
geom_point_interactive(
  aes(x = year, y = score, color = score),
  size = 10
) 
```

<div class='text-steps'>Uso de mapeamentos interativos<br><span>tooltip, data_id e onclick</span></div>
```{.r}
aes(
  tooltip = school,
  data_id = school,
  onclick = 'this.style.r = "20";'
)
```

<div class='text-steps'>Criação do objeto interativo<br><span>girafe com ggobj e options</span></div>
```{.r}
ggiraph::girafe(
  # É fundamental declarar o argumento *ggobj* na função
  ggobj = estatico, 
  bg = "#0c0c0c"
)
```
</div>

<!-- ########################## Slide ########################## -->
## Argumentos aes() do ggiraph
[Mapeando interatividade]{.subtitle}

Três novos argumentos fazem a mediação entre o banco de dados e a peça interativa no ggiraph:

<div class='flex-row listing-items martop5'>
<div class='list-item'><div>Cria tooltips com HTML</div><hr>**tooltip**</div>
<div class='list-item'><div>Agrupa formas geométricas</div><hr>**data_id**</div>
<div class='list-item'><div>Comandos JS por clique</div><hr>**onclick**</div>
</div>

<!-- ########################## Slide ########################## -->
## Argumentos aes() do ggiraph
[Mapeando interatividade]{.subtitle}

<div class='flex-row gap10'>
<div class='flex-column gap10 aes-code'>
```{.r code-line-numbers="5-11"}
estatico <- ggplot(bancodedados) +
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  aes(
    # Tooltip é uma string que aceita código HTML e CSS
    tooltip = glue::glue(
      "<img src='www/images/escudos/{filename}.jpg' width='150px;'>
      <div style='width:110px;text-align:center;padding:20px;'>{school}</div>"
    )
  ) +
  scale_color_gradientn(colours = rio.paletter("Mangueira")) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```
<div class='list-item'><div>Cria tooltips com HTML</div><hr>**tooltip**</div>
</div>

```{r, fig.height=18}
estatico <- ggplot(bancodedados) +
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  aes(
    # Tooltip é uma string que aceita código HTML e CSS
    tooltip = glue::glue(
      "<img src='www/images/escudos/{filename}.jpg' width='150px;'>
      <div style='width:110px;text-align:center;padding:20px;'>{school}</div>"
    )
  ) +
  scale_color_gradientn(colours = rio.paletter("Mangueira")) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```
</div>

<!-- ########################## Slide ########################## -->
## Argumentos aes() do ggiraph
[Mapeando interatividade]{.subtitle}

<div class='flex-row gap10'>
<div class='flex-column gap10 aes-code'>
```{.r code-line-numbers="5-8"}
estatico <- ggplot(bancodedados) +
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  aes(
    # data_id é similar ao argumento group do aes()
    data_id = year
  ) +
  scale_color_gradientn(colours = rio.paletter("Mangueira")) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```
<div class='list-item'><div>Agrupa formas geométricas</div><hr>**data_id**</div>
</div>

```{r, fig.height=18}
estatico <- ggplot(bancodedados) +
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  aes(
    # data_id é similar ao argumento group do aes()
    data_id = year
  ) +
  scale_color_gradientn(colours = rio.paletter("Mangueira")) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```
</div>

<!-- ########################## Slide ########################## -->
## Argumentos aes() do ggiraph
[Mapeando interatividade]{.subtitle}

<div class='flex-row gap10'>
<div class='flex-column gap10 aes-code'>
```{.r code-line-numbers="5-10"}
estatico <- ggplot(bancodedados) +
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  aes(
    # onclick é uma string com comandos JS disparados ao clicar numa forma geométrica
    onclick = 'this.style.r = "20";
    this.style.fill = "red";
    setTimeout(() => {  this.style.r = "12"; }, 1000);'
  ) +
  scale_color_gradientn(colours = rio.paletter("Mangueira")) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```
<div class='list-item'><div>Comandos JS por clique</div><hr>**onclick**</div>
</div>

```{r, fig.height=18}
estatico <- ggplot(bancodedados) +
  geom_point_interactive(
    aes(x = year, y = score, color = score), size = 10
  ) +
  aes(
    # onclick é uma string com comandos JS disparados ao clicar numa forma geométrica
    onclick = 'this.style.r = "20";
    this.style.fill = "red";
    setTimeout(() => {  this.style.r = "12"; }, 1000);'
  ) +
  scale_color_gradientn(colours = rio.paletter("Mangueira")) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c")
  )

ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
```
</div>

<!-- ########################## Slide ########################## -->
## Customizando o gráfico
[Família de funções opts_xxxx()]{.subtitle}

```{r}
estatico <- ggplot(bancodedados) +
  geom_point_interactive(
    aes(
      x = year, y = score, color = score,
      tooltip = glue::glue("<strong style='font-size:2em;'>{score}</strong><br>{school}"),
      data_id = school
    ), size = 10
  ) +
  geom_text_interactive(
    aes(x = year, y = score, label = score, data_id = school),
    size = 7, alpha = 0.5, color = "white", hjust = -0.7
  ) +
  scale_color_gradientn(colours = rio.paletter("Mangueira")) +
  scale_x_discrete() +
  theme_minimal() +
  theme(
    text = element_text(size = 30, color = "white"),
    axis.title = element_text(size = 40),
    plot.background = element_rect(fill = "#0c0c0c", color = "#0c0c0c"),
    plot.margin = margin(10,1,1,1, "lines")
  )
```

<div class='flex-row gap10'>
<div class='flex-column gap10' id='custom-intro'>
<div>O argumento `options` é uma lista que recebe funções da família `opts_xxxx()`</div>
```{.r code-line-numbers="4-19|5-6|7-8|9-18"}
ggiraph::girafe(
  ggobj = estatico,
  bg = "#0c0c0c",
  options = list(
    opts_tooltip(css = "width:100px;border-radius:50px 0;padding:20px;",
                 use_fill = TRUE),
    opts_hover(css = "r:20;"),
    opts_hover_inv(css = "opacity:0.1;"),
    opts_selection(
      css = girafe_css(
        css = "opacity:1;",
        text = "font-size:2em;",
        point = "stroke:gold;stroke-width:5px;"
      ),
      type = "multiple",
      only_shiny = FALSE
    )
  )
)
```
</div>

```{r, fig.height=17}
ggiraph::girafe(
  ggobj = estatico,
  bg = "#0c0c0c",
  options = list(
    opts_tooltip(css = "width:100px;border-radius:50px 0;padding:20px;",
                 use_fill = TRUE),
    opts_hover(css = "r:20;"),
    opts_hover_inv(css = "opacity:0.1;"),
    opts_selection(
      css = girafe_css(
        css = "opacity:1;",
        text = "font-size:2em;",
        point = "stroke:gold;stroke-width:5px;"
      ),
      type = "multiple",
      only_shiny = FALSE
    )
  )
)
```
</div>

<!-- ########################## Slide ########################## -->
## Hospedando o gráfico
[Interatividade além do painel "Viewer"]{.subtitle}

Como o gráfico interativo gerado pela função `girafe()` é composto de elementos svg, ele pode ser inserido tanto em documentos HTML feitos em Quarto/R Markdown quanto em apps feitos em Shiny.

<div class='flex-row gap10 martop5' id='host-img'>
![](https://github.com/quarto-dev/quarto-r/raw/main/man/figures/quarto.png)

![](https://github.com/rstudio/rmarkdown/raw/main/man/figures/logo.png)

![](https://github.com/rstudio/shiny/raw/main/man/figures/logo.png)
</div>

<!-- ########################## Slide ########################## -->
## Hospedando o gráfico
[Interatividade além do painel "Viewer"]{.subtitle}

```{.r}
# ```{r} Todo o processamento é realizado dentro de chunks

## Versão estática c/ elementos interativos e sintaxe ggplot
estatico <- ...

## Versão interativa
ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")

# ```
```

<div class='martop5'>
Em documentos HTML a função `girafe()` pode ser chamada diretamente dentro de um `chunk R`. A página HTML gerada pode ser então hospedada em quaiquer serviços. Duas opções gratuitas e fáceis de usar são o **R Pubs** e o **Github Pages**.
</div>

<!-- ########################## Slide ########################## -->
## Hospedando o gráfico
[Interatividade além do painel "Viewer"]{.subtitle}

```{.r}
# Todo o processamento é realizado no *server* dentro do ggiraph::renderGirafe()
output$interativo <- ggiraph::renderGirafe({
  
  ## Versão estática c/ elementos interativos e sintaxe ggplot
  estatico <- ...
  
  ## Versão interativa
  ggiraph::girafe(ggobj = estatico, bg = "#0c0c0c")
  
})

# A posição do gráfico é definida no *UI*
ggiraph::girafeOutput("interativo", width = "100%")
```

<div class='martop5'>
Já os Shiny apps, estes são divididos entre a parte do UI e do server. A função `girafe()` é chamada dentro da função `renderGirafe()` na parte do server. A posição do gráfico é definida através da função `girafeOutput()` na parte do UI.
</div>

<!-- ########################## Slide ########################## -->
## Galeria de exemplos
[Produções próprias com código comentado livre para acesso]{.subtitle}

<div class='flex-column'>
<a id='gallery-carmen' class='gallery-item' href='https://icarobernardes.github.io/carmen_sandiego_DOS/' target='_blank'></a>
<div class='gallery-caption'>
<p>Arte em homenagem ao jogo educativo "Where in the World is Carmen Sandiego?". Rico em uso de tooltips e efeitos por hover.</p>
<p>💻 Repositório: <a href='https://github.com/IcaroBernardes/carmen_sandiego_DOS' target='_blank'>acesse aqui</a></p>
<p>🚀 Página: <a href='https://icarobernardes.github.io/carmen_sandiego_DOS/' target='_blank'>acesse aqui</a></p>
</div>
</div>

<!-- ########################## Slide ########################## -->
## Galeria de exemplos
[Produções próprias com código comentado livre para acesso]{.subtitle}

<div class='flex-column'>
<a id='gallery-brlineup' class='gallery-item' href='https://icarobernardes.github.io/brazil_lineup/' target='_blank'></a>
<div class='gallery-caption'>
<p>Arte que lista os países dos clubes dos convocados da seleção brasileira masculina de Futebol para as copas de 1932 até 2022. Usa cliques para "filtrar" a visão por país.</p>
<p>💻 Repositório: <a href='https://github.com/IcaroBernardes/brazil_lineup' target='_blank'>acesse aqui</a></p>
<p>🚀 Página: <a href='https://icarobernardes.github.io/brazil_lineup/' target='_blank'>acesse aqui</a></p>
</div>
</div>

<!-- ########################## Slide ########################## -->
## Galeria de exemplos
[Produções próprias com código comentado livre para acesso]{.subtitle}

<div class='flex-column'>
<a id='gallery-gppresid' class='gallery-item' href='https://icarobernardes.github.io/gp_eleitoral/' target='_blank'></a>
<div class='gallery-caption'>
<p>Arte que mostra o top 5 partidos em eleições presidenciais brasileiras de 1998 até 2018 nas maiores cidades por estado. Usa tooltips e uma função customizada para incluir imagens baseada em `{ggpath}`.</p>
<p>💻 Repositório: <a href='https://github.com/IcaroBernardes/gp_eleitoral' target='_blank'>acesse aqui</a></p>
<p>🚀 Página: <a href='https://icarobernardes.github.io/gp_eleitoral/' target='_blank'>acesse aqui</a></p>
</div>
</div>

<!-- ########################## Slide ########################## -->
## {}
<strong id='thanks-text'>Obrigado pela atenção!</strong>

<div class='flex-row martop5'>

<div id='thanks-carnaval'>
O banco de dados usado nos exemplos pode ser obtido através do pacote {carnaval}
![](www/images/carnaval.png)
</div>

<div id='thanks-profile'>
<strong>Vamos conversar mais sobre dados?</strong>
<a class='author-link' href='https://twitter.com/icarobsc' target='_blank'><span id='twt' class='glyph'></span>@IcaroBSC</a>
<a class='author-link' href='https://github.com/IcaroBernardes' target='_blank'><span id='ghb' class='glyph'></span>@IcaroBernardes</a>
<a class='author-link' href='https://www.linkedin.com/in/icarobsc/' target='_blank'><span id='lkd' class='glyph'></span>@icarobsc</a>
<a class='author-link' href='mailto:icaro@bitanalytics.dev.br' target='_blank'><span id='eml' class='glyph'></span>icaro@bitanalytics.dev.br</a>
</div>

</div>